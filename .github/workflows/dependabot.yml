on:
  workflow_run:
    workflows: [".github/workflows/main.yml"]
    types: 
      - completed

jobs:
  deployDependabot:
    if: github.event.workflow_run.conclusion == 'success' && github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "build"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/build.zip', Buffer.from(download.data));
      - run: unzip build.zip
      - run: |
          mkdir .vercel
          echo $VERCEL_PROJECT > .vercel/project.json
          npx vercel --token "$VERCEL_TOKEN" > previewUrl.txt
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT: ${{ secrets.VERCEL_PROJECT }}
      - uses: actions/github-script@v3
        if: github.event_name	== 'pull_request'
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Preview : ${require('fs').readFileSync('previewUrl.txt', 'utf8')} ðŸš€`
            })
      - uses: actions/github-script@v3
        if: github.event_name	!= 'pull_request'
        with:
          script: |
            const { data: deployment } = await github.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              required_contexts: [],
              environment: 'preview',
              transient_environment: true,
              mediaType: {
                previews: "ant-man"
              }
            });
            github.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              log_url: require('fs').readFileSync('previewUrl.txt', 'utf8'),
              mediaType: {
                previews: "ant-man"
              }
            });
