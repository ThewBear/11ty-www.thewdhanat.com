on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 5 * * *"

permissions:
  contents: read
  pull-requests: write
  deployments: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: "22"
      - run: npm ci
      - run: npm run lint

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: "22"
      - uses: dawidd6/action-download-artifact@v11
        with:
          workflow: images.yml
          name: images
          path: _data/images
      - uses: dawidd6/action-download-artifact@v11
        with:
          workflow: cv.yml
          name: cv
          path: cv
      - run: npm ci
      - run: npm run build
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE: ${{ secrets.NOTION_DATABASE }}
      - uses: actions/upload-artifact@v5
        with:
          name: build
          path: _site
      - run: "[ -f _site/index.html ]"

  deploy:
    if: (github.ref != 'refs/heads/main' || github.event_name	== 'pull_request') && github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: "22"
      - uses: dawidd6/action-download-artifact@v11
        with:
          workflow: images.yml
          name: images
          path: _data/images
      - uses: dawidd6/action-download-artifact@v11
        with:
          workflow: cv.yml
          name: cv
          path: cv
      - run: |
          mkdir .vercel
          echo $VERCEL_PROJECT > .vercel/project.json
          npx vercel --token "$VERCEL_TOKEN" > previewUrl.txt
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT: ${{ secrets.VERCEL_PROJECT }}
      - uses: actions/github-script@v8
        if: github.event_name	== 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Preview : ${require('fs').readFileSync('previewUrl.txt', 'utf8')} ðŸš€`
            })
      - uses: actions/github-script@v8
        if: github.event_name	!= 'pull_request'
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              required_contexts: [],
              environment: 'preview',
              transient_environment: true,
            });
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              log_url: require('fs').readFileSync('previewUrl.txt', 'utf8'),
            });

  deploy_production:
    if: (github.event_name	== 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: "22"
      - uses: dawidd6/action-download-artifact@v11
        with:
          workflow: images.yml
          name: images
          branch: main
          path: _data/images
      - uses: dawidd6/action-download-artifact@v11
        with:
          workflow: cv.yml
          name: cv
          branch: main
          path: cv
      - run: |
          mkdir .vercel
          echo $VERCEL_PROJECT > .vercel/project.json
          npx vercel --prod --token "$VERCEL_TOKEN" > previewUrl.txt
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT: ${{ secrets.VERCEL_PROJECT }}
      - uses: actions/github-script@v8
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              required_contexts: [],
            });
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              log_url: require('fs').readFileSync('previewUrl.txt', 'utf8'),
            });
